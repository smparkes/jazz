= jazz

* http://github.com/smparkes/jazz
* http://groups.google.com/group/jazz-talk
* #jazz-talk at freenode

== Description

Jazz provides support for running JavaScript tests and specs written
using frameworks such as Jasmine under env.js. It includes support for
running via wake.


== Install

You can install the gem via <tt>gem install smparkes-jazz</tt>.  If
you want to install from github (http://github.com/smparkes/jazz),
you'll need to checkout the Jasmine submodule (<tt>git submodule
update --init</tt>) and also need to make sure you have the
prerequisites listed in the gemspec in the Rakefile. <tt>rake
gemspec</tt> will then build and copy the necessary parts of Jasmine.

If you want to run the examples/tests, you'll need jQuery. The <tt>git
submodule update --init</tt> command will have brought in jQuery, but
you'll need to build it: <tt>cd vendor/jquery && make</tt>.

Even if you install the gem, you may want to get the github files to
see and run the examples.

== Use

From the root of a project, i.e., the parent of the <tt>spec</tt>
directory, you can use the <tt>jazz</tt> command as you would the
rspec <tt>spec</tt> command, e.g.,

     jazz spec/foo_spec.js spec/bar_spec.js

You can also execute HTML specs via jazz:

     jazz spec/foo_spec.html

or even normal pages, that have the proper hooks to run as examples
(see below).

HTML files must be valid XML, i.e., XHTML, at this time.

The HTML fixture must load the necessary test files. Any number of
fixtures can be passed to the <tt>jazz</tt> command.

jazz uses env.js to run the tests, feeding it your HTML and
JavaScript, plus the necessary JavaScript and controls to make the tests
run correctly. You can see the entire <tt>envjsrb</tt> command by
passing <tt>jazz</tt> the <tt>-v</tt> flag.

The Jasmine tests are configured to report results in streaming XML
(JUnit format, more or less), which <tt>jazz</tt> turns into the
familiar rspec format. The <tt>--xml</tt> flag
causes <tt>jazz</tt> to display the raw XML output.

To run all the tests in the <tt>spec</tt> directory repeatedly you can
use wake:

  rake test

or

  wake

See jazz's <tt>Wakefile</tt> file and the
discussion on examples below.

You can also try using <tt>autojaz</tt> as
you would use <tt>autospec</tt>:

   autojaz

You'll need to install the ZenTest gem if you don't have it installed;
<tt>jazz</tt> can be used without ZenTest installed, but
<tt>autojaz</tt> cannot be. Note that <tt>autojaz</tt> may be
deprecated in favor of <tt>wake</tt>.

Screen shot at http://www.scrnshots.com/users/smparkes/screenshots/206033

== Examples

There are examples in <tt>examples/*</tt> and <tt>spec/examples/*</tt>. You can run the
tests with <tt>rake test</tt> which will run wake against the Wakefile.
(Wake as a runner will probably replace
autojaz.)  You'll need the wake gem.

Running wake will run all the
tests and then watch the file system for changes. When it sees a change,
it reruns the test. It knows how to find the HTML fixtures for specs
where they exist in the right place, or it just runs the JavaScript
spec itself. An example of the former is the pair
<tt>example/hello_world.html</tt> and
<tt>spec/example/hello_world_spec.js</tt>: jazz will reload the HTML if either file is changed.
An example of the latter
is <tt>spec/example/plain_spec.js</tt>.

You can also load the individual HTML files in the browser to run the
tests there. For example, on a Mac, <tt>open
example/hello_world.html</tt>. (The idea is that for production, the
spec helper files are changed to not load the tests: that should be
the only change necessary. Or the <tt><script></tt> tag could be
ripped out.)  Note that to run the tests from the filesystem in Firefox, you'll
need to set the <tt>security.fileuri.strict_origin_policy</tt> option
to true.

== Recent Changes

1. Pass dependence flag to envjsrb to support wake dependences

1. Add wake support

1. Add example

1. Support multiple fixtures on the <tt>jazz</tt> command. (Actually, this is entirely due to <tt>envjsrb</tt> supporting multiple fixtures. You need a recent build from github or an smparkes-envjs gem version of at least 0.0.5.)

== Things to do

1. Complete and test support for loading against an HTTP server.

1. Focus on failing tests until fixed, a la autotest.

1. Extend to more frameworks, e.g., qunit. There's little here that's actually Jasmine-specific.

1. Including a missing script should be an error

1. Make work in interactive mode (requires intro/outro/out:blank intergration with envjsrb)

== Copyright

Copyright (c) 2009 Steven Parkes. See LICENSE for details.
