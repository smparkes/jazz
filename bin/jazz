#!/usr/bin/env ruby

$VERBOSE = true

require 'pathname'
require 'jazz/options'

JAZZ_DIR = File.expand_path(File.join(File.dirname(__FILE__), '..', 'lib', 'jazz'))

driver = "envjsrb"

if $jazz_qunit
  driver = "qunit"
end

if $jazz_envjs
  driver = "envjsrb"
end

intro = File.join(JAZZ_DIR, driver, "intro.js")
outro = File.join(JAZZ_DIR, driver, "outro.js")

args = [ "env JAZZ_JS_PATH='#{JAZZ_DIR}' envjsrb" ]

if $jazz_deps
  args += [ "--deps", $jazz_deps ]
end

introd = true
outrod = true

def helper f
  spec_dir = File.dirname( File.join("spec", f) );
  helper = nil
  while spec_dir and spec_dir != "." and spec_dir !~ /^\s*$/ 
    helper = File.join( spec_dir, "spec_helper.js" );
    if File.exist? helper
      break
    end
    helper = File.join( spec_dir, "SpecHelper.js" );
    if File.exist? helper
      break
    end
    spec_dir = File.dirname( spec_dir )
  end
  return to_uri(helper) if File.exists? helper
end

def spec f
  dir = File.dirname( File.join("spec", f) );
  base = File.basename(f)
  base.sub! /\.(html|js)$/,""
  helper = File.join( dir, base + "_spec.js" );
  return helper if File.exist? helper
  helper = File.join( dir, base + "Spec.js" );
  return helper if File.exist? helper
  nil
end

def to_uri f
  uri = URI.parse f

  if uri.scheme == nil
    uri.scheme = "file"
    begin
      uri.path = Pathname.new(uri.path).realpath.to_s
    rescue Errno::ENOENT; end
    uri = URI.parse uri.to_s
  end

  class << uri
    def to_s
      s = super
      s.sub %r(^file:/([^/])), 'file:///\1'
    end
  end

  uri
end

def level f
  dir = File.dirname(f)
  level = 0;
  while dir and dir != "." and dir do
    level += 1
    dir =File.dirname(dir)
  end
  # p f, level
  level
end

ARGV.each do |f|

  uri = to_uri f

  if true

    if introd && !outrod
      args << outro
      outrod = true
      introd = false
    end

    if outrod && !introd && uri.path =~ %r{\.js$}
      args << "about:blank"
    end

    if uri.path !~ %r{\.js$}
      args << uri
    end

    args << intro

    root = nil

    if uri.path !~ %r{\.js$} 
      level(f).times 
      root = URI.escape("javascript:jazz.root='" + ("../"*level(f)) +"'")
    else
      root = URI.escape("javascript:jazz.root=''")
    end
    root.gsub!("'","\\\\'")
    args << root

    h = helper f

    args << h if h

    h = spec f
    args << h if h

    if uri.path =~ %r{\.js$}
      args << uri
    end

    introd = true
    outrod = false
  elsif uri.scheme == "about" && uri.opaque == "blank"
    if introd && !outrod
      args << outro
      outrod = true
      introd = false
    end
    args << uri_s
  else
    args << uri_s

    h = helper f

    args << f if h
  end

end

args << outro

cmd = args.join(" ")

puts cmd if $jazz_verbose 

require 'eventmachine'
require 'nokogiri'

class Restart < Exception; end

def colour(text, colour_code)
  # return text unless ENV['RSPEC_COLOR'] || (colour? & (autospec? || output_to_tty?))
  "#{colour_code}#{text}\e[0m"
end

def green(text); colour(text, "\e[32m"); end
def red(text); colour(text, "\e[31m"); end
def yellow(text); colour(text, "\e[33m"); end
def blue(text); colour(text, "\e[34m"); end

$spec_info = {}
$spec_info[:specs] = []
$spec_info[:failures] = []
$spec_info[:pending] = []
$success = []
$id = nil

class SAX < Nokogiri::XML::SAX::Document

  def start_element name, attrs
    attrs = Hash[*attrs]
    case name
    when "testsuites";
      if attrs["id"] != $id
        $success << true
      end
      $id = attrs["id"]
    when "testsuite";
      @testsuite_name = attrs["name"]
      if @testsuite_pending = ( attrs["skipped"] == "true" )
        $spec_info[:specs] << (tc = {})
        tc[:name] = @testsuite_name
        $spec_info[:pending] << $spec_info[:specs].last
      end
    when "testcase";
      $spec_info[:specs] << (tc = {})
      tc[:name] = @testsuite_name + " : " + attrs["name"]
      @testcase_failed = false
    when "failure";
      $success[-1] = false
      $spec_info[:failures] << (tc = $spec_info[:specs].last)
      tc[:message] = attrs["message"]
      @testcase_failed = true
    else; raise "hell: #{name}"
    end
  end

  def cdata_block string
    if @testcase_failed
      $spec_info[:failures].last[:stack] ||= ""
      $spec_info[:failures].last[:stack] << string
    end
  end

  def end_element name
    case name
    when "testsuites";
      raise Restart
    when "testsuite";
      if !$jazz_xml
        if @testsuite_pending
          char = yellow("*")
          print char
          $stdout.flush
        end
      end
    when "testcase";
      if !$jazz_xml
        char = nil
        if @testcase_failed
          char = red("F")
        else
          char = green(".")
        end
        print char
        $stdout.flush
      end
    when "failure";
    else; raise "hell: #{name}"
    end
  end
end

$failed_processes = 0

module WriteToNokogiri
  def post_init
    @parser = Nokogiri::XML::SAX::PushParser.new( SAX.new )
  end
  def receive_data data
    begin
      if $jazz_xml
        # $stderr.print data
        puts data
        $stdout.flush
      end
      @parser << data
    rescue Restart
      @parser = Nokogiri::XML::SAX::PushParser.new( SAX.new )
    rescue Exception => e
      $stderr.puts "Parser raised #{e} on #{data}"
      exit 1
    end
  end
  def unbind
    $failed_processes += 1  if get_status.exitstatus &&
                               get_status.exitstatus  > 0
    EM.stop
  end
end

date = Time.now
failures = nil
examples = nil
pending = nil

EM.run do
  EM.popen cmd, WriteToNokogiri
end

puts
puts

if !$jazz_xml
  if $spec_info[:pending].length > 0
    puts "Pending:"
    $spec_info[:pending].each do |pending|
      puts
      puts yellow(pending[:name])
    end
    puts "\n"
  end
  $spec_info[:failures].each_with_index do |failure,i|
    print i+1,")\n"
    print red("#{failure[:name]} FAILED\n")
    print red(failure[:message]),"\n"
    # double check, but is there really anything in the jaz stack that's useful?
    stack = failure[:stack]
    stack and ( stack = stack.split "\n" )
    stack and stack.each do |line|
      if line =~ %r(/jasmine.js:\d+) || line =~ %r(/jasmine/src/.*\.js:\d+)
        break
      end
      print line, "\n"
    end
    # p stack
    # print failure[:stack],"\n"
  end
  puts "Finished in #{Time.now - date} seconds"
  puts
  examples = $spec_info[:specs].length
  # require 'pp'
  # pp $spec_info[:specs]
  failures = $spec_info[:failures].length
  pending = $spec_info[:pending].length
  if $failed_processes > 0
    examples += $failed_processes 
    failures += $failed_processes 
  end
  msg = "#{examples} examples, #{failures} failures, #{pending} pending"
  if failures > 0
    msg = red(msg)
  elsif pending > 0
    msg = yellow(msg)
  else
    msg = green(msg)
  end
  puts msg
end

if $jazz_wake
  $success.each_with_index do |result, index|
    if !result
      puts "\##{ARGV[index]}"
    end
  end

end


exit ( !failures.nil? && failures > 0 ) ? 1 : 0
