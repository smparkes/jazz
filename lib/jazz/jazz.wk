# -*- mode: ruby -*-

require "wake/graph/node/weak"

module Jazz; end
class Jazz::Plugin < Wake::Plugin
  extend Wake::Plugin::Class

  FIXTURE = lambda do |path|
    fixture = nil

    if path =~ %r{((S|(_s))pec)\.js$}
      fixture = path.sub( %r{[^/]+/}, "" ).sub( %r{(S|(_s))pec.js$}, ".html" )
      fixture = nil if !File.exists? fixture
    end

    fixture
  end

  default :regexp => /\.html$|((S|(_s))pec)\.js$/,
          :options => { :fixture => FIXTURE }

  def out_of_date? node, flag
    return true if super
    return flag
  end

  def watcher
    default = super
    lambda do |path, graph|
      if node = default.call( path, graph )
        virtual = Node::Virtual.new( node, cls.default[:options][:virtual] )
        virtual = create graph, virtual, :from => node, :plugin => self
        fixture = cls.default[:options][:fixture].call path
        create graph, Node::Weak.new( fixture ), :to => virtual if fixture
      end
    end
  end

  def primary node
    values = node.depends_on.nodes.values.uniq
    return values[0] if values.length == 1
    raise "ambiguous primary for #{path}" if values.length > 2
    values.detect { |v| v.path =~ /\.html$/ }
  end

  def fire_all
    lambda do |nodes|
      succeeded = nodes.inject({}) { |hash, node| hash[node] = true; hash }
      cmd = "jazz #{nodes.map { |node| primary(node).path }.uniq.join(' ')}"
      puts cmd
      cmd = "jazz --wake #{nodes.map { |node| primary(node).path }.uniq.join(' ')}"
      status = open("|"+cmd) do |f|
        nl = true
        while c = f.getc
          if c == ?\n
            nl = true
            $stdout.putc c
            $stdout.flush
          elsif !nl or c != ?\#
            nl = false
            $stdout.putc c
            $stdout.flush
          else
            path = f.readline.chomp
            array = nodes.select { |node| primary(node).path == path }
            succeeded[array[0]] = false
          end
        end
      end
      succeeded.each do |node, v|
        FileUtils.mkdir_p Pathname(node.path).dirname
        open(node.path,"w") do |f|
          f.truncate 0
          f.write({:succeded => v}.to_json)
        end
      end
      return status
    end

  end

end
