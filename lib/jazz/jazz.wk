# -*- mode: ruby -*-

require 'fileutils'
require "wake/graph/node/weak"

module Jazz; end
class Jazz::Plugin < Wake::Plugin
  extend Wake::Plugin::Class

  FIXTURE = lambda do |path|
    fixture = nil

    if path =~ %r{((S|(_s))pec)\.js$}
      fixture = path.sub( %r{[^/]+/}, "" ).sub( %r{(S|(_s))pec.js$}, ".html" )
      fixture = nil if !File.exists? fixture
    end

    fixture
  end

  default :regexp => /\.html$|((S|(_s))pec)\.js$/,
          :options => { :fixture => FIXTURE }

  def watcher
    default = super
    lambda do |path, graph|
      if node = default.call( path, graph )
        virtual = Node::Virtual.new( graph, node, cls.default[:options][:virtual] )
        virtual = create graph, virtual, :from => node, :plugin => self, :primary => node
        fixture = cls.default[:options][:fixture].call path
        if fixture
          fixture = create graph, Node::Weak.new( fixture ), :to => virtual 
          virtual.primary = fixture
        end
      end
    end
  end

  def fire_all
    lambda do |nodes|
      results = nodes.inject({}) { |hash, node| hash[node] = {"succeeded" => true}; hash }
      cmd = "jazz #{nodes.map { |node| node.primary.path }.uniq.join(' ')}"
      puts cmd
      cmd = "jazz --wake #{nodes.map { |node| node.primary.path }.uniq.join(' ')}"
      current = nil
      open("|"+cmd) do |f|
        nl = true
        while c = f.getc
          if c == ?\n
            nl = true
            $stdout.putc c
            $stdout.flush
          elsif !nl or c != ?\#
            nl = false
            $stdout.putc c
            $stdout.flush
          else
            line = f.readline.chomp
            if m = %r{^([^\#]+)\s+([^\s]*)}.match(line)
              path = m[1]
              result = m[2]
              array = nodes.select { |node| node.primary.path == path }
              current = results[array[0]]
              current["succeeded"] = result == "failed" ? false : true
            elsif m = %r{^\#([^\s]*)}.match(line)
              raise "unexpected line order: #{line}" if !current
              current["deps"] ||= []
              current["deps"] << m[1]              
            else
              raise "unexpected line: #{line}"
            end
          end
        end
      end
      success = true
      results.each do |node, v|
        success &&= v["succeeded"]
        node.succeeded = v["succeeded"]
        node.deps = v["deps"]
        node.save!
      end
      success
    end

  end

end
